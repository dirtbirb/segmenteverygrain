#:kivy 2.3.1

<TextInput>:
    multiline: False

<Row@BoxLayout>:
    orientation: 'horizontal'
    size_hint_y: 1

<FileChooserListView>:
    size_hint_y: 10

<LoadDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: 'vertical'
        FileChooserListView:
            id: filechooser
            path: '.'
        Row:
            Button:
                text: 'Load'
                on_release: root.load(filechooser.path, filechooser.selection[0])
            Button:
                text: 'Cancel'
                on_release: root.cancel()

<PointCountDialog>:
    orientation: 'vertical'
    Widget:
    Row:
        Label:
            text: 'Enter grid spacing (m): '
        TextInput:
            id: spacing
            focus: True
            on_text_validate: root.count(int(self.text))
    Row:
        Button:
            text: 'Count'
            on_release: root.count(int(spacing.text))
        Button:
            text: 'Cancel'
            on_release: root.cancel()
    Widget:       

<SaveDialog>:
    text_input: text_input
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: 'vertical'
        Row:
            Label:
                text: 'Choose a name and location for output files (no file extension)'
        FileChooserListView:
            id: filechooser
            path: root.path
            on_selection: text_input.text = self.selection and self.selection[0] or ''
        Row:
            TextInput:
                id: text_input
                text: root.filename
                multiline: False
        Row:
            Button:
                text: 'Save'
                on_release: root.save(filechooser.path, text_input.text)
            Button:
                text: 'Cancel'
                on_release: root.cancel()

<RootLayout>
    orientation: 'vertical'
    Row:
        Label:
            text: 'Unet model'
        Button:
            text: root.unet_fn or 'Load'
            on_release: root.show_load_unet()
    Row:
        Label:
            text: 'SAM checkpoint'
        Button:
            text: root.sam_checkpoint_fn or 'Load'
            on_release: root.show_load_checkpoint()
    Row:
        Label:
            text: 'Image'
        Button:
            text: root.image_fn or 'Load'
            on_release: root.show_load_image()
    Row:
        size_hint_y: 1
        Label:
            text: 'Grains'
        Button:
            text: root.grains_fn or 'Load'
            on_release: root.show_load_grains()
    Row:
        size_hint_y: 1
        Label:
            text: 'Pixels per meter'
        TextInput:
            text: str(root.px_per_m)
            background_color: 'red' if root.px_per_m == 1 else 'green'
            on_text_validate: root.px_per_m = int(self.text)
    Image:
        id: image
        size_hint_y: 10
    Row:
        size_hint_y: 2
        disabled: root.unet_model is None or type(root.image) is type(None)
        Button:
            text: 'Auto (normal)'
            background_color: (1, 0, 0, 1)
            on_release: root.auto_segment()
        Button:
            text: 'Auto (large)'
            background_color: (0, 1, 0, 1)
            on_release: root.large_segment()
        Button:
            text: 'Interactive'
            background_color: (0, 0, 1, 1)
            on_release: root.manual_segment()
        Button:
            text: 'Point count'
            background_color: (1, 1, 0, 1)
            on_release: root.show_point_count()
            disabled: not len(root.grains)

RootLayout: